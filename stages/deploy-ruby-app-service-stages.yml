parameters:
  buildConfiguration: 'Release'
  azureSubscription: ''
  projectPath: '/'
  appName: 'app-api'
  package: 'app-service'

stages:
- template: build-ruby-rails-stage.yml
  parameters: 
    buildConfiguration: ${{ parameters.buildConfiguration }}
    projectPath: ${{ parameters.projectPath }}

- stage: 'Deploy_to_Dev'
  displayName: 'Deploy to Dev'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/feature/mvp-azure-pipelines-api'))
  jobs:
  - deployment: 'Deploy_WebApp_Dev'
    displayName: 'Deploy WebApp to Dev'
    environment: 'Dev'
    variables:
      - group: Env-Dev
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UseRubyVersion@0
            inputs:
              versionSpec: '~= 2.6'
              addToPath: true

          - script: |
              ruby -v
              bundler -v
              which bundler              
              pwd

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Dev'
              WebAppKind: 'webAppLinux'
              webAppName: '${{ parameters.appName }}-$(environment)'
              #package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'
              #packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              Package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'RUBY|2.6'
              enableCustomDeployment: true
              DeploymentType: 'zipDeploy'           
              ScriptType: 'Inline Script'
              InlineScript: |
                eval "$(rbenv init -)"
                rbenv shell 2.6.2
                bundle install --local
                bundle exec rake db:migrate

- stage: 'Deploy_to_Test'
  displayName: 'Deploy to Test'
  dependsOn: Deploy_to_Dev
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: 'Deploy_WebApp_Test'
    displayName: 'Deploy WebApp to Test'
    environment: 'Test'
    variables:
      - group: Env-Test
    
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Dev'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'

- stage: 'Deploy_to_Demo'
  displayName: 'Deploy to Demo'
  dependsOn: Deploy_to_Test
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
  jobs:
  - deployment: 'Deploy_WebApp_Demo'
    displayName: 'Deploy WebApp to Demo'
    environment: 'Demo'
    variables:
      - group: Env-Demo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Dev'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'

- stage: 'Deploy_to_UAT'
  displayName: 'Deploy to UAT'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/release/*'))
  jobs:
  - deployment: 'Deploy_WebApp_UAT'
    displayName: 'Deploy WebApp to UAT'
    environment: 'UAT'
    variables:
      - group: Env-UAT
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Dev'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'

- stage: 'Deploy_to_Load'
  displayName: 'Deploy to Load'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/release/*'))
  jobs:
  - deployment: 'Deploy_WebApp_Load'
    displayName: 'Deploy WebApp to Load'
    environment: 'Load'
    variables:
      - group: Env-Load
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Staging'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'

- stage: 'Deploy_to_Staging'
  displayName: 'Deploy to Staging'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: 'Deploy_WebApp_Staging'
    displayName: 'Deploy WebApp to Staging'
    environment: 'Staging'
    variables:
      - group: Env-Staging
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Staging'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'

- stage: 'Deploy_to_Training'
  displayName: 'Deploy to Training'
  dependsOn: Deploy_to_Staging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))  
  jobs:
  - deployment: 'Deploy_WebApp_Training'
    displayName: 'Deploy WebApp to Training'
    environment: 'Training'
    variables:
      - group: Env-Training
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Staging'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'

- stage: 'Deploy_to_Prod'
  displayName: 'Deploy to Prod'
  dependsOn: Deploy_to_Staging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: 'Deploy_WebApp_Prod'
    displayName: 'Deploy WebApp to Prod'
    environment: 'Prod'
    variables:
      - group: Env-Prod
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              connectionType: 'AzureRM'
              azureSubscription: 'CRC Tech Prod'
              appType: 'webApp'
              webAppName: '${{ parameters.appName }}-$(environment)'
              package: '$(Pipeline.Workspace)/**/${{ parameters.package }}.zip'